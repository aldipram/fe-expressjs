
import Head from "next/head";
import { Button, Container, FormControl, FormLabel, Heading, Input, Spinner, Table, Tbody, Td, Th, Thead, Tr, useToast, VStack } from "@chakra-ui/react";
import { useEffect, useState } from "react";
import { useGetProducts } from "@/features/product/useGetProducts";
import { useFormik } from "formik";
import { useCreateProduct } from "@/features/product/useCreateProduct";
import { useDeleteProduct } from "@/features/product/useDeleteProduct";
import { usePatchProduct } from "@/features/product/usePatchProduct";

export default function Home() {

  const [ isMounted, setIsMounted ] = useState(false);
  const { data, isLoading: isLoadingProducts, refetch: refetchProducts } = useGetProducts();
  const toast = useToast();

  const formik = useFormik({
    initialValues: {
      name: "",
      price: "",
      description: "",
      image: "",
      id: "",
    },
    onSubmit: () => {
      const { name, price, description, image, id } = formik.values;

      if (!id) {
        createProduct({
          name,
          price: parseInt(price),
          description,
          image,
        });
        toast({
          title: "Product created successfully",
          status: "success",
          position: "top-right",
        });
      } else {
        editProduct({
          name,
          price: parseInt(price),
          description,
          image,
          id,
        });
        toast({
          title: "Product edited successfully",
          status: "success",
          position: "top-right",
        });
      }

      formik.setFieldValue("name", "");
      formik.setFieldValue("price", 0);
      formik.setFieldValue("description", "");
      formik.setFieldValue("image", "");
      formik.setFieldValue("id", 0);
    },
  });

  const { mutate: createProduct, isLoading: createProductIsLoading } = useCreateProduct({
    onSuccess: () => {
      refetchProducts()
    },
  });

  const { mutate: deleteProduct } = useDeleteProduct({
    onSuccess: () => {
      refetchProducts()
    },
  })

  const { mutate: editProduct, isLoading: editProductIsLoading } = usePatchProduct({
    onSuccess: () => {
      refetchProducts()
    },
  })

  const dataResult = () => {

    return data?.data.map((product) => {
      const handleDelete = () => {
        deleteProduct(product.id)
        toast({
          title: "Delete successfully",
          status: "info",
          position: "top-right",
        })
      }

        return (
          <Tr key={product.id}>
            <Td>{product.id}</Td>
            <Td>{product.name}</Td>
            <Td>{product.price}</Td>
            <Td>{product.description}</Td>
            <Td>
              <Button colorScheme="blue" onClick={() => onEdit(product)}>Edit</Button>
            </Td>
            <Td>
              <Button colorScheme="red" onClick={handleDelete}>Delete</Button>
            </Td>
          </Tr>
        )
    })
  }

  useEffect(() => {
    setIsMounted(true);
  }, []);

  if (!isMounted) {
    return null;
  };

  const handleFormInput = (event) => {
    formik.setFieldValue(event.target.name, event.target.value);
  };

  const onEdit = (product) => {
    formik.setFieldValue("id", product.id);
    formik.setFieldValue("name", product.name);
    formik.setFieldValue("price", product.price);
    formik.setFieldValue("description", product.description);
  }


  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Container>
          <Heading>hello world</Heading>
          <Table mb={10}>
              <Thead>
                  <Tr>
                    <Th>Id</Th>
                    <Th>name</Th>
                    <Th>price</Th>
                    <Th>description</Th>
                    <Th>Action</Th>
                  </Tr>
              </Thead>
            <Tbody>
                {dataResult()}
                {isLoadingProducts ? <Spinner /> : null }
            </Tbody>
          </Table>

          <form onSubmit={formik.handleSubmit}>
            <VStack spacing={4}>
              <FormControl>
                <FormLabel>Product Id</FormLabel>
                <Input
                  name="id"
                  value={formik.values.id}
                  disabled
                />
              </FormControl>
              <FormControl>
                <FormLabel>Product Name</FormLabel>
                <Input
                  onChange={handleFormInput}
                  name="name"
                  value={formik.values.name}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Price</FormLabel>
                <Input
                  onChange={handleFormInput}
                  name="price"
                  value={formik.values.price}
                />
              </FormControl>
              <FormControl>
                <FormLabel>Description</FormLabel>
                <Input
                  onChange={handleFormInput}
                  name="description"
                  value={formik.values.description}
                />
              </FormControl>

              {createProductIsLoading || editProductIsLoading ? (
                <Spinner />
              ) : (
                <Button type="submit">Submit Product</Button>
              )}

            </VStack>
          </form>
        </Container>
      </main>
      </>
    );
}